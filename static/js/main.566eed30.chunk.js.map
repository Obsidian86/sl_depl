{"version":3,"sources":["components/Part.js","components/FullSheet.js","components/AddSheet.js","components/Transition.js","components/App.js","serviceWorker.js","index.js"],"names":["Part","props","styles","width","height","boxShadow","lineHeight","textAlign","borderRadius","shape","marginLeft","margin","marginTop","marginRight","endRow","fontSize","backgroundColor","error","float","react_default","a","createElement","style","number","FullSheet","sheetWidth","sheetHeight","aspect","partWidth","appWidth","partHeight","across","Math","floor","parseFloat","down","maxCount","countParts","count","parseInt","Object","toConsumableArray","Array","sheetStyles","border","concat","marginBottom","padding","justifyContent","alignItems","fontWeight","color","display","map","s","i","components_Part","key","background","clear","onClick","deleteSheet","index","AddSheet","_useState","useState","_useState2","slicedToArray","sheet","updateSheet","handleChange","event","objectSpread","defineProperty","target","id","value","className","paddingTop","alignContent","toggleDrawer","aria-label","htmlFor","type","name","onChange","addSheet","Transition","CSSTransition","in","showIt","timeout","classNames","thisClass","unmountOnExit","children","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","sheets","state","length","filter","newSheet","drawerOpened","refs","app","offsetWidth","_this2","setWidth","window","addEventListener","_this3","_this$state","components_Transition","components_AddSheet","ref","components_FullSheet","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAqBeA,EAnBF,SAACC,GACV,IAAMC,EAAS,CACXC,MAAOF,EAAME,MAAQ,KACrBC,OAAQH,EAAMG,OAAS,KACvBC,UAAW,sBACXC,WAAYL,EAAMG,OAAS,KAC3BG,UAAW,SACXC,aAA8B,WAAhBP,EAAMQ,MAAqB,MAAQ,OACjDC,WAAYT,EAAMU,OAAS,KAC3BC,UAAWX,EAAMU,OAAS,KAC1BE,YAAaZ,EAAMa,OAASb,EAAMU,OAAS,KAAO,EAClDI,SAAU,OACVC,gBAAiBf,EAAMgB,MAAQ,MAAO,UACtCC,MAAO,QAGX,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,MAAOpB,GAASD,EAAMsB,SCoDvBC,EAnEG,SAACvB,GAEf,IAAIwB,EAAaxB,EAAME,MACnBuB,EAAczB,EAAMG,OACpBuB,EAASD,EAAcD,EACvBhB,EAAQR,EAAMQ,MAEdmB,EAAa3B,EAAM2B,UAAYH,EAAcxB,EAAM4B,SACnDC,EAAc7B,EAAM6B,WAAaJ,GAAgBzB,EAAM4B,SAAWF,GAElEhB,EAAUV,EAAMU,OAASc,EAAcxB,EAAM4B,SAG7CE,EAASC,KAAKC,OAAOhC,EAAME,MAAQ+B,WAAWjC,EAAMU,UAAYuB,WAAWjC,EAAM2B,WAAaM,WAAWjC,EAAMU,UAC/GwB,EAAOH,KAAKC,OAAOhC,EAAMG,OAAS8B,WAAWjC,EAAMU,UAAYuB,WAAWjC,EAAM6B,YAAcI,WAAWjC,EAAMU,UAC/GyB,EAAWL,EAASI,EAEpBE,EAA6B,SAAhBpC,EAAMqC,MAAmBF,EAAWG,SAAStC,EAAMqC,OAChEA,EAAKE,OAAAC,EAAA,EAAAD,CAAOE,MAAML,IAEhBM,EAAc,CAChBC,OAAQ,iBACRvC,UAAW,sBACXF,MAAK,GAAA0C,OAAK5C,EAAM4B,SAAX,MACLzB,OAAM,GAAAyC,OAAK5C,EAAM4B,SAAWF,EAAtB,MACNhB,OAAQ,IACRmC,aAAc,OACdC,QAAS,IACT/B,gBAAiB,OACjBgC,eAAgB,aAChBC,WAAY,cAGhB,OACI9B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACwB,aAAc,OAAQlC,UAAW,SAC1CO,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAE4B,WAAY,OAAQJ,aAAc,OAAQK,MAAO,QAASnC,gBAAiB,OAAQR,aAAc,MAAOuC,QAAS,MAAOK,QAAQ,iBAA5I,gBAA2K1B,EAA3K,OAA4LD,EAA5L,MAA2MW,EAA3M,WAA6NnC,EAAM2B,UAAnO,OAAkP3B,EAAM6B,WAAxP,qBAAsRC,EAAtR,eAA0SI,EAA1S,SACAhB,EAAAC,EAAAC,cAAA,OAAKC,MAAOqB,GAEJL,EAAMe,IAAI,SAACC,EAAGC,GAAJ,OACNpC,EAAAC,EAAAC,cAACmC,EAAD,CACIrD,MAAOyB,EACPxB,OAAQ0B,EACR2B,IAAKF,EACL5C,OAAQA,EACRF,MAAOA,EACPc,OAAQgC,EAAI,EACZtC,MAAOsC,GAAKnB,EACZtB,QAAYyC,EAAI,GAAKxB,IAAW,OAKhDZ,EAAAC,EAAAC,cAAA,UAAQC,MAAO,CACXsB,OAAQ,OACRc,WAAY,OACZP,MAAO,QACPnC,gBAAiB,MACjBR,aAAc,MACduC,QAAS,YACTY,MAAO,OACPP,QAAS,QACTxC,UAAW,QACZgD,QAAS,kBAAM3D,EAAM4D,YAAY5D,EAAM6D,SAV1C,kCCoBGC,SAxEE,SAAC9D,GAAU,IAAA+D,EAEKC,mBACzB,CACE9D,MAAO,GACPC,OAAQ,GACRO,OAAQ,GACRiB,UAAW,GACXE,WAAY,GACZrB,MAAO,SACP6B,MAAO,SAVW4B,EAAA1B,OAAA2B,EAAA,EAAA3B,CAAAwB,EAAA,GAEjBI,EAFiBF,EAAA,GAEVG,EAFUH,EAAA,GAalBI,EAAe,SAACC,GAClBF,EAAY7B,OAAAgC,EAAA,EAAAhC,CAAA,GAAI4B,EAAL5B,OAAAiC,EAAA,EAAAjC,CAAA,GAAa+B,EAAMG,OAAOC,GAAKJ,EAAMG,OAAOE,UAE3D,OACIzD,EAAAC,EAAAC,cAAA,OAAKwD,UAAU,iBAAiBvD,MAAO,CAAC8B,QAAS,SAC7CjC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACnB,MAAO,OAAQQ,OAAQ,IAAKoC,QAAQ,IAAKK,QAAS,OAAQJ,eAAgB,gBAAiB5C,OAAQ,OAAQQ,UAAW,SAC/HO,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAACnB,MAAO,MAAOQ,OAAQ,IAAKmE,WAAY,QAAnD,sBACA3D,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACnB,MAAO,KAAM4E,aAAa,WACnC5D,EAAAC,EAAAC,cAAA,UAAQuC,QAAS3D,EAAM+E,aAAc1D,MAAO,CACxCnB,MAAO,OACPQ,OAAQ,aACRiC,OAAQ,gBACRc,WAAY,OACZlD,aAAc,MACd0C,WAAY,OACZC,MAAO,MACPJ,QAAS,WACVkC,aAAW,QATd,OAYR9D,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACnB,MAAO,QAChBgB,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,SAAf,SACA/D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOC,KAAK,QAAQT,GAAG,QAAQC,MAAOR,EAAMjE,MAAOkF,SAAUf,KAE7EnD,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACnB,MAAO,QAChBgB,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,SAAf,UACA/D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOC,KAAK,SAAST,GAAG,SAASC,MAAOR,EAAMhE,OAAQiF,SAAUf,KAEhFnD,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACnB,MAAO,QAChBgB,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,SAAf,cACA/D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOC,KAAK,YAAYT,GAAG,YAAYC,MAAOR,EAAMxC,UAAWyD,SAAUf,KAEzFnD,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACnB,MAAO,QAChBgB,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,SAAf,eACA/D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOC,KAAK,aAAaT,GAAG,aAAaC,MAAOR,EAAMtC,WAAYuD,SAAUf,KAE5FnD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,SAAf,UACA/D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOC,KAAK,SAAST,GAAG,SAASC,MAAOR,EAAMzD,OAAQ0E,SAAUf,KAEhFnD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,SAAf,SACA/D,EAAAC,EAAAC,cAAA,UAAQ8D,KAAK,OAAOC,KAAK,QAAQT,GAAG,QAAQC,MAAOR,EAAM3D,MAAO4E,SAAUf,GACtEnD,EAAAC,EAAAC,cAAA,UAAQuD,MAAM,UAAd,sBACAzD,EAAAC,EAAAC,cAAA,UAAQuD,MAAM,UAAd,YAGRzD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,SAAf,SACA/D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOC,KAAK,QAAQT,GAAG,QAAQC,MAAOR,EAAM9B,MAAO+C,SAAUf,KAE7EnD,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACnB,MAAO,OAAQI,UAAW,WACnCY,EAAAC,EAAAC,cAAA,UAAQ4D,aAAW,gBAAgBrB,QAAS,kBAAM3D,EAAMqF,SAASlB,KAAjE,yBCpDDmB,EAbI,SAACtF,GAChB,OACIkB,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CACIC,GAAIxF,EAAMyF,OACVC,QAAS,IACTC,WAAY3F,EAAM4F,UAClBC,eAAa,GAEZ7F,EAAM8F,WCoEJC,cAzEb,SAAAA,IAAc,IAAAC,EAAA,OAAAzD,OAAA0D,EAAA,EAAA1D,CAAA2D,KAAAH,IACZC,EAAAzD,OAAA4D,EAAA,EAAA5D,CAAA2D,KAAA3D,OAAA6D,EAAA,EAAA7D,CAAAwD,GAAAM,KAAAH,QAoBFtC,YAAc,SAACO,GACb6B,EAAKM,SAAS,CACZC,OAAQP,EAAKQ,MAAMD,OAAOE,OAAS,EAAIT,EAAKQ,MAAMD,OAAOG,OAAO,SAACrD,EAAGQ,GAAJ,OAAcM,IAAUN,IAAU,MAvBxFmC,EA0BdX,SAAW,SAACsB,GACVX,EAAKM,SAAS,CACZC,OAAM,GAAA3D,OAAAL,OAAAC,EAAA,EAAAD,CAAMyD,EAAKQ,MAAMD,QAAjB,CAAyBI,IAC/BC,cAAc,KA7BJZ,EAgCdjB,aAAe,WACbiB,EAAKM,SAAS,CACZM,cAAeZ,EAAKQ,MAAMI,gBAhC5BZ,EAAKQ,MAAS,CACZ5E,SAAU,KACVgF,cAAc,EACdL,OAAQ,IALEP,0EAUZE,KAAKI,SAAS,CACZ1E,SAAUsE,KAAKW,KAAKC,IAAIC,0DAIR,IAAAC,EAAAd,KAClBA,KAAKe,WACLC,OAAOC,iBAAiB,SAAU,WAChCH,EAAKC,8CAmBA,IAAAG,EAAAlB,KAAAmB,EACkCnB,KAAKM,MAAxCD,EADCc,EACDd,OAAQ3E,EADPyF,EACOzF,SAAUgF,EADjBS,EACiBT,aACxB,OACE1F,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQwD,UAAU,aAAajB,QAASuC,KAAKnB,cAA7C,aAIA7D,EAAAC,EAAAC,cAACkG,EAAD,CAAY7B,OAAQmB,EAAchB,UAAU,QAC1C1E,EAAAC,EAAAC,cAACmG,EAAD,CAAUlC,SAAUa,KAAKb,SAAUN,aAAcmB,KAAKnB,gBAGxD7D,EAAAC,EAAAC,cAAA,OAAKwD,UAAU,MAAM4C,IAAI,OAErBjB,EAAOnD,IAAI,SAACe,EAAON,GAAR,OACT3C,EAAAC,EAAAC,cAACqG,EAAD,CACE7F,SAAUA,EACV1B,MAAOiE,EAAMjE,MACbC,OAAQgE,EAAMhE,OACd0B,WAAYsC,EAAMtC,WAClBF,UAAWwC,EAAMxC,UACjBnB,MAAO2D,EAAM3D,MACb6B,MAAO8B,EAAM9B,MACb3B,OAAQyD,EAAMzD,OACdmD,MAAOA,EACPD,YAAawD,EAAKxD,YAClBJ,IAAKK,eAhEH6D,aCOEC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9G,EAAAC,EAAAC,cAAC6G,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.566eed30.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Part = (props) => { \r\n    const styles = {\r\n        width: props.width + \"px\",\r\n        height: props.height + \"px\",\r\n        boxShadow: \"inset 0 0 3px black\",\r\n        lineHeight: props.height + \"px\",\r\n        textAlign: \"center\",\r\n        borderRadius: props.shape === \"circle\" ? \"50%\" : \"none\",\r\n        marginLeft: props.margin + \"px\",\r\n        marginTop: props.margin + \"px\",\r\n        marginRight: props.endRow ? props.margin + \"px\" : 0,\r\n        fontSize: \".9em\",\r\n        backgroundColor: props.error ? \"red\": \"#c2c2c2\",\r\n        float: \"left\"\r\n    }\r\n\r\n    return(<div style={styles}>{props.number}</div>);\r\n}\r\n\r\nexport default Part;","import React from 'react';\r\nimport Part from './Part'; \r\n\r\nconst FullSheet = (props) => {\r\n\r\n    let sheetWidth = props.width;\r\n    let sheetHeight = props.height;\r\n    let aspect = sheetHeight / sheetWidth;\r\n    let shape = props.shape;\r\n\r\n    let partWidth = (props.partWidth / sheetWidth) * props.appWidth;\r\n    let partHeight = (props.partHeight / sheetHeight) * (props.appWidth * aspect);\r\n\r\n    let margin = (props.margin / sheetWidth) * props.appWidth;\r\n\r\n   \r\n    let across = Math.floor((props.width - parseFloat(props.margin)) / (parseFloat(props.partWidth) + parseFloat(props.margin)));\r\n    let down = Math.floor((props.height - parseFloat(props.margin)) / (parseFloat(props.partHeight) + parseFloat(props.margin)));\r\n    let maxCount = across * down; \r\n  \r\n    let countParts = props.count === \"fill\" ? maxCount : parseInt(props.count);\r\n    let count = [...Array(countParts)];\r\n\r\n    const sheetStyles = {\r\n        border: \"1px solid #999\",\r\n        boxShadow: \"3px 3px 3px #d3d3d3\",\r\n        width: `${props.appWidth}px`,\r\n        height: `${props.appWidth * aspect}px`,\r\n        margin: \"0\",\r\n        marginBottom: \"20px\",\r\n        padding: \"0\",\r\n        backgroundColor: \"#fff\",\r\n        justifyContent: \"flex-start\",\r\n        alignItems: \"flex-start\"\r\n    }\r\n    \r\n    return (\r\n        <div style={{marginBottom: \"30px\", marginTop: \"24px\"}}>\r\n            <p style={{ fontWeight: \"bold\", marginBottom: \"10px\", color: \"white\", backgroundColor: \"#333\", borderRadius: \"5px\", padding: \"6px\", display:\"inline-block\"}}> Sheet size: {sheetHeight}\" x {sheetWidth}\" -{maxCount} total ({props.partWidth}\" x {props.partHeight}\") fit on sheet | {across} across and {down} down</p>\r\n            <div style={sheetStyles}>\r\n                {\r\n                    count.map((s, i) =>\r\n                        <Part\r\n                            width={partWidth}\r\n                            height={partHeight}\r\n                            key={i}\r\n                            margin={margin}\r\n                            shape={shape}\r\n                            number={i + 1}\r\n                            error={i >= maxCount}\r\n                            endRow = { (i + 1) % across === 0 }\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            <button style={{\r\n                border: \"none\",\r\n                background: \"none\",\r\n                color: \"white\",\r\n                backgroundColor: \"red\",\r\n                borderRadius: \"5px\",\r\n                padding: \"10px 14px\",\r\n                clear: \"both\",\r\n                display: \"block\",\r\n                marginTop: \"20px\"\r\n            }} onClick={() => props.deleteSheet(props.index)}>Delete</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FullSheet;","import React, {useState} from 'react';\r\nimport \"./styles/addSheets.css\";\r\n\r\nconst AddSheet = (props) => {\r\n\r\n    const [sheet, updateSheet] = useState(\r\n        {\r\n          width: 96,\r\n          height: 48,\r\n          margin: .5,\r\n          partWidth: 15,\r\n          partHeight: 15,\r\n          shape: \"circle\",\r\n          count: \"fill\"\r\n        }); \r\n\r\n    const handleChange = (event) =>{ \r\n        updateSheet({...sheet, [event.target.id]: event.target.value});\r\n    }  \r\n    return(\r\n        <div className='form-container' style={{display: \"flex\"}}>\r\n            <div style={{width: \"120%\", margin: \"0\", padding:\"0\", display: \"flex\", justifyContent: \"space-between\", height: \"50px\", marginTop: \"15px\"}}>\r\n                <h1 style={{width: \"99%\", margin: \"0\", paddingTop: \"8px\"}}> Sheet properties </h1>\r\n                <div style={{width: \"1%\", alignContent:\"center\" }}>\r\n                    <button onClick={props.toggleDrawer} style={{  \r\n                        width: \"auto\",\r\n                        margin: \"10px 0 0 0\",\r\n                        border: \"2px solid red\",\r\n                        background: \"none\",\r\n                        borderRadius: \"50%\",\r\n                        fontWeight: \"bold\",\r\n                        color: \"red\",\r\n                        padding: \"3px 6px\"\r\n                    }} aria-label=\"test\">X</button>\r\n                </div> \r\n            </div>\r\n            <div style={{width: \"45%\"}}>\r\n                <label htmlFor='width'>Width</label>\r\n                <input type='text' name='width' id='width' value={sheet.width} onChange={handleChange} />\r\n            </div>\r\n            <div style={{width: \"45%\"}}>\r\n                <label htmlFor='width'>Height</label>\r\n                <input type='text' name='height' id='height' value={sheet.height} onChange={handleChange} />\r\n            </div> \r\n            <div style={{width: \"45%\"}}>\r\n                <label htmlFor='width'>Part width</label>\r\n                <input type='text' name='partWidth' id='partWidth' value={sheet.partWidth} onChange={handleChange} />\r\n            </div>\r\n            <div style={{width: \"45%\"}}>\r\n                <label htmlFor='width'>Part height</label>\r\n                <input type='text' name='partHeight' id='partHeight' value={sheet.partHeight} onChange={handleChange} />\r\n            </div>\r\n            <div>\r\n                <label htmlFor='width'>Margin</label>\r\n                <input type='text' name='margin' id='margin' value={sheet.margin} onChange={handleChange} />\r\n            </div>\r\n            <div>\r\n                <label htmlFor='width'>Shape</label> \r\n                <select type='text' name='shape' id='shape' value={sheet.shape} onChange={handleChange} >\r\n                    <option value=\"square\">Square / Rectangle</option>\r\n                    <option value=\"circle\">Circle</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor='width'>Count</label>\r\n                <input type='text' name='count' id='count' value={sheet.count} onChange={handleChange} />\r\n            </div>\r\n            <div style={{width: \"100%\", textAlign: \"center\"}}>\r\n                <button aria-label=\"Add new sheet\" onClick={() => props.addSheet(sheet)}>Add Sheet</button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddSheet;","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nconst Transition = (props) => {\r\n    return (\r\n        <CSSTransition\r\n            in={props.showIt}\r\n            timeout={300}\r\n            classNames={props.thisClass}\r\n            unmountOnExit\r\n        >\r\n            {props.children}\r\n        </CSSTransition>\r\n    );\r\n}\r\n\r\nexport default Transition;","import React, { Component } from 'react';\r\nimport FullSheet from './FullSheet';\r\nimport AddSheet from './AddSheet'; \r\nimport Transition from './Transition';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = ({\r\n      appWidth: null,\r\n      drawerOpened: false,\r\n      sheets: []\r\n    });\r\n  }\r\n\r\n  setWidth() {\r\n    this.setState({\r\n      appWidth: this.refs.app.offsetWidth\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setWidth();\r\n    window.addEventListener(\"resize\", () => {\r\n      this.setWidth();\r\n    });\r\n  }\r\n  deleteSheet = (sheet) => {  \r\n    this.setState({\r\n      sheets: this.state.sheets.length > 1 ? this.state.sheets.filter((s, index) => sheet !== index ) : []\r\n    });\r\n  }\r\n  addSheet = (newSheet) =>{  \r\n    this.setState({\r\n      sheets: [...this.state.sheets, newSheet],\r\n      drawerOpened: false\r\n    }); \r\n  }\r\n  toggleDrawer = () =>{\r\n    this.setState({\r\n      drawerOpened: !this.state.drawerOpened\r\n    });\r\n  }\r\n  render() {\r\n    let { sheets, appWidth, drawerOpened } = this.state;\r\n    return (\r\n      <span>\r\n        <header className=\"App-header\" onClick={this.toggleDrawer}>\r\n          Add sheet\r\n        </header>\r\n        \r\n        <Transition showIt={drawerOpened} thisClass=\"fade\">\r\n          <AddSheet addSheet={this.addSheet} toggleDrawer={this.toggleDrawer}/> \r\n        </Transition>\r\n\r\n        <div className=\"App\" ref=\"app\"> \r\n          {\r\n            sheets.map((sheet, index) => \r\n              <FullSheet\r\n                appWidth={appWidth}\r\n                width={sheet.width}\r\n                height={sheet.height}\r\n                partHeight={sheet.partHeight}\r\n                partWidth={sheet.partWidth}\r\n                shape={sheet.shape}\r\n                count={sheet.count}\r\n                margin={sheet.margin}\r\n                index={index}\r\n                deleteSheet={this.deleteSheet} \r\n                key={index}\r\n              /> \r\n            )\r\n          } \r\n        </div>\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"normalize-css\";\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}